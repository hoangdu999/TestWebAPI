// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestWebAPI.Entities;

namespace TestWebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestWebAPI.Entities.ProductDetailPropertyDetails", b =>
                {
                    b.Property<int>("ProductDetailPropertyDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductDetailsProductDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyDetailsPropertyDetailId")
                        .HasColumnType("int");

                    b.HasKey("ProductDetailPropertyDetailId");

                    b.HasIndex("ProductDetailsProductDetailId");

                    b.HasIndex("ProductsProductId");

                    b.HasIndex("PropertyDetailsPropertyDetailId");

                    b.ToTable("ProductDetailPropertyDetails");
                });

            modelBuilder.Entity("TestWebAPI.Entities.ProductDetails", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductPropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("ShellPrice")
                        .HasColumnType("float");

                    b.HasKey("ProductDetailId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("TestWebAPI.Entities.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TestWebAPI.Entities.Properties", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertySort")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("TestWebAPI.Entities.PropertyDetails", b =>
                {
                    b.Property<int>("PropertyDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PropertiesPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyDetailCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyDetailDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("PropertyDetailId");

                    b.HasIndex("PropertiesPropertyId");

                    b.ToTable("PropertyDetails");
                });

            modelBuilder.Entity("TestWebAPI.Entities.ProductDetailPropertyDetails", b =>
                {
                    b.HasOne("TestWebAPI.Entities.ProductDetails", "ProductDetails")
                        .WithMany()
                        .HasForeignKey("ProductDetailsProductDetailId");

                    b.HasOne("TestWebAPI.Entities.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsProductId");

                    b.HasOne("TestWebAPI.Entities.PropertyDetails", "PropertyDetails")
                        .WithMany()
                        .HasForeignKey("PropertyDetailsPropertyDetailId");

                    b.Navigation("ProductDetails");

                    b.Navigation("Products");

                    b.Navigation("PropertyDetails");
                });

            modelBuilder.Entity("TestWebAPI.Entities.Properties", b =>
                {
                    b.HasOne("TestWebAPI.Entities.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsProductId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("TestWebAPI.Entities.PropertyDetails", b =>
                {
                    b.HasOne("TestWebAPI.Entities.Properties", "Properties")
                        .WithMany()
                        .HasForeignKey("PropertiesPropertyId");

                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
